# HG changeset patch
# User Torsten Marek <shlomme@gmail.com>
# Date 1416661998 -3600
# Node ID afea46c0380956213976db2ce0f1e8f3cf6a0abc
# Parent  c9c283ee85618a5e3a0701dac0925804a73ec4b6
Add support for more fine-grained control over extension loading.

--- a/manager.py
+++ b/manager.py
@@ -86,6 +86,8 @@ class AstroidManager(OptionsProviderMixI
             self.astroid_cache = {}
             self._mod_file_cache = {}
             self.transforms = {}
+            self.always_load_extensions = False
+            self.extension_package_whitelist = set()
 
     def ast_from_file(self, filepath, modname=None, fallback=True, source=False):
         """given a module name, return the astroid object"""
@@ -113,6 +115,16 @@ class AstroidManager(OptionsProviderMixI
         from astroid.builder import AstroidBuilder
         return AstroidBuilder(self).string_build('', modname)
 
+    def _can_load_extension(self, modname):
+        if self.always_load_extensions:
+            return True
+        if modutils.is_standard_module(modname):
+            return True
+        parts = modname.split('.')
+        return any(
+            '.'.join(parts[:x]) in self.extension_package_whitelist
+            for x in range(1, len(parts) + 1))
+
     def ast_from_module_name(self, modname, context_file=None):
         """given a module name, return the astroid object"""
         if modname in self.astroid_cache:
@@ -129,7 +141,7 @@ class AstroidManager(OptionsProviderMixI
                 if module is not None:
                     return module
             elif mp_type in (imp.C_BUILTIN, imp.C_EXTENSION):
-                if mp_type == imp.C_EXTENSION and not modutils.is_standard_module(modname):
+                if mp_type == imp.C_EXTENSION and not self._can_load_extension(modname): 
                     return self._build_stub_module(modname)
                 try:
                     module = modutils.load_module_from_name(modname)
